Team meetings in CSE2 374 at 2 pm Thursdays.
Team info & Policies
Team Members:
        DM Allie: Backend
        Hunter: Frontend
        Joan: Frontend
        Steve: Backend
        Jacob: Front/backend
        
Relevant Artifacts:
-GitHub repo: https://github.com/cse403RollBuddy
-This document! (Don’t click this link you’ll recurse into the shadow realm… yikes: https://docs.google.com/document/d/1HkBncd28IhJP_KtGiDg5ODc6LID7TRu02IcbO1d5rKc/edit?usp=sharing)


Communication methods:
        -Slack:
                -Formal links and important docs should be shared here.
                -Primarily used for speaking with TM
        -Discord:
-General logistics and discussions will happen here (we all check discord more than slack)
        


Product Description
Our project proposes to create an application that allows D&D5E players to create or import characters, track changing aspects to the character through multiple play sessions, and view character information in an intuitive UI. Most importantly, it will also tell players what their bonuses are to various kinds of rolls, allow players to actually simulate rolling the dice within the application, and automatically apply the modifiers to display the final result.


Major Features:
1. Create a character and populate necessary numeric fields during creation (or import info); character info persists across sessions.
2. Level up a character, updating stats, abilities, and dice modifiers as appropriate
3. Perform combat rolls, including saving throws, AC checks, to-hit rolls, and damage rolls, all with appropriate dice and modifiers.
4. Perform ability check dice rolls with appropriate dice and modifiers.
5. Perform spell rolls, including spell checks and spell damage, with appropriate dice and modifiers.


Stretch Goals:
1. Update numbers upon certain events (e.g. - gaining experience or gold, taking damage, receive a buff/debuff)
2. Save multiple characters
3. New to D&D vs Power User interface


Uses cases 
Hunter
Use Case: Ability rolls
Actors: D&D players
Triggers: The player rolls the die and affects their character's ability score.
Pre condition: The player rolls for an ability check and adds score in form
Post condition: The players character ability score changes for their character on template
 List of Steps: 
1. It is the current players turn for an ability roll
2. The players character will indicate how many rolls are required (sometimes there are compounding advantage/disadvantages)
3. Add DM influence on advantage or disadvantage.
4. The player inputs this information in the form for ability or implements auto roll
5. The program then changes the stats accordingly
Exceptions (error scenarios): The user inputs values that are not on the d20 die or inputs null value.
Extensions/Variations (alternate paths): The user uses the computer to roll the d20 die which then inputs the value automatically for them. Add a situation that requires an ability check and then use the d20 roll to determine the outcome of the situation. 




Allie
Use Case: Character creation in the application
Actor: a non-DM player in a game of D&D, i.e. a standard user
Triggers: the user indicates they’d like to create a new character (via button)
Precondition(s): the user is at the “home screen” of the application
Postcondition(s): 
1. a character’s essential numeric information is stored in the system and available to the user
2. that character appears in the user’s list of available characters
3. the dice are available to the user/character
4. varyingly-typed rolls reflect the correct modifications to the result of the roll 
List of Steps: 
1. user indicates they’d like to create a new character
2. system displays the character creation UI in a fresh state; system presents input box for: entering a character name, system presents options for: choosing a race (determines some proficiencies), system presents options for: choosing a class (determines some proficiencies), system presents options for: choosing a character’s background (determines some proficiencies), system presents input box for: indicating starting level
3. User chooses name, race, class, background, and starting level
4. System presents buttons to determine ability scores via “rolling dice for ability scores” or “choosing ability scores”
5. User indicates they choose “rolling dice for ability scores” by pressing the button
6. System rolls 4 d6 and adds the highest 3, repeats 5 more times, and lists out the 6 values
7. User assigns each of the 6 values to the 6 abilities (strength, dexterity, constitution, intelligence, wisdom, and charisma). User presses “done” when finished assigning values
8. System presents options for “using race to determine bonuses” or “choosing bonuses”
9. User presses button for “choosing bonuses”
10. System presents (+) button next to each ability score
11. User assigns +2 bonus to one ability by pressing (+) next to one ability, and +1 bonus to a different ability by pressing (+) next to that ability. User presses “done” when finished assigning bonuses
12. System presents options for: “choosing a character’s starting equipment” or “using default equipment for class and background”
13. User presses button for “choosing a character’s starting equipment”
14. System displays basic equipment list with price and weight associated with each piece of equipment. System displays user’s starting gold pieces (determined by class), and amount of gear they can carry (determined by strength score * 15)
15. User presses button next to each piece of equipment they want. Price is subtracted from their starting gold pieces. Weight is subtracted from their amount they can carry. 
16. User presses “done” button when their selection is complete
17. System displays spell list for user’s class. System displays number of spells user can select (based on level + spellcasting ability modifier)
18. User presses button next to spells they select
19. User presses “done” button when their selection is complete
20. System displays “finish creation” button at bottom of screen
21. User presses “finish creation” button to complete character creation
Extensions/Variations (alternate paths): 
1. 5’. User presses button for “choosing ability scores” variant
6’. System presents each ability score with a starting value of 8 with a button for (-) and a button for (+), and a pool of 27 points to spend on each ability
7’. User presses (+) buttons next to each ability score, so that they are each in the range between 8 and 15. Each press takes 1 point from the pool of 27, and the last press to take any one score from 14 to 15 takes 2 points from the pool of 27. User presses “done” when done.
2. 9’. User presses button for “using race to determine bonuses” variant
10’. System automatically adds +2 to one ability score and +1 to another based on the race the player has selected, then skips to step 12.
3. 13’. User presses button for “using default equipment for class and background” variant
14’. System lists default equipment in character’s inventory, then skips to step 17
4. 17’. User is not a spellcaster. System skips to step 21.
Exceptions (error scenarios): 
   1. user tries to “finish creation” with an empty name field, without choosing a race/class/background, without entering ability scores, without indicating starting level, or without picking equipment/spells; System highlights unfinished portions of character sheet, does not finish until all fields are completed
   2. When allocating ability points on “choose ability scores” variant path, user presses “done” when they still have some of the 27 points unallocated. 
System highlights remaining points, does not finish allocating ability points
   3. When allocating bonus ability points via “choosing bonuses”, user presses “done” when they haven’t finished allocating the +2 and/or +1 
System highlights (+) button next to abilities, or maybe indicator showing which they need to allocate (+2 and/or +1)?
   4. When determining equipment via “choosing a character’s starting equipment”, user tries to select a piece of equipment that costs more than remaining gold
System highlights amount of gold remaining, does not select equipment
   5. When determining equipment via “choosing a character’s starting equipment”, user tries to select a piece of equipment that weighs more than remaining carry ability
System highlights amount of weight remaining, does not select equipment




Steve
Use Case: character creation via import
Actor: a non-DM player in a game of D&D, i.e. a standard user
Triggers: the user indicates they’d like to create a new character (via button?)
Precondition(s): the user is at the “home screen” of the application and has the data-to-import in some format recognizable to the program, or just has their physical character sheet
Postcondition(s): 
      1. a character’s essential numeric information is stored in the system and available to the user; that character appears in the user’s list of available characters
      2. the dice are available to the user/character 
      3. varyingly-typed rolls reflect the correct modifications to the result of the roll 


List of Steps: 
      1. user indicates they’d like to create a new character 
      2. system displays the character creation UI in a fresh state
      3. user indicates they’d like to create the character via importing data (rather than fresh character creation)
      4. system presents options for “import by file” (a stretch variant) or “import by direct entry” (a core feature)
      5. For direct entry, input fields are presented for entering a character name, entering a character race/class/background, entering ability scores, indicating starting level, entering maximum hit points, entering inventory, entering coinage, and allocating skills/proficiencies (according to level/class/race/background) that may affect dice rolls
Exceptions (error scenarios): 
      1. user tries to “finish creation” with some empty/incomplete necessary field, for example: an empty name field, without choosing a race/class/background, without entering ability scores, without indicating starting level, or without allocating the correct number of skills/proficiencies
      2. user tries to select a skill or spell that is unavailable to their character according to the game rules 
      3. User tries to enter illegal values (according to the game rules) into some field
      1. Ability scores
      2. Skills/proficiencies/spells
      3. Level
      4. Coinage (e.g. can’t be negative) 
      4. user wants to import a file but the system can’t find it 
      5. user imports a file with data in the wrong format/order
Extensinos/Variations (alternate paths): 
      1. random character generation? 
      2. Import character data somehow rather than direct input – would involve informing the user of the correct format and location for the file – probably both in a README and also inside of the application, but would otherwise be probably simpler than fetching and parsing a bunch of user-input
      3. add tracking for equipment-based modifiers to dice rolls (involves tracking equipment), add buff/debuff-based modifiers to dice rolls (involves tracking buffs/debuffs), add hitpoint tracking (involves tracking damage/healing), add experience point tracking (involves tracking level-up milestones), add spell and other limited-use ability tracking (involves tracking short and long rests to replenish), add inventory tracking (separate from worn-equipment), add coinage tracking – all of these may be handled in some way during character creation, and would be handled depending on how much functionality the application offers.


Joan:
Use Case: Creature destroyed / died
Actors: Characters and Monsters (common players)
Triggers: Injury/damage effects on a player in a combat
Preconditions: A creature's current Hit Point, which represents a combination of physical and mental durability,  must be greater or equal to 0
Postconditions: Due to a damage hit, the creature’s Current hit point <= 0 
      1. creature is in instant death (character is destroyed);
      2. fall unconscious (possibly be saved or died later)
List of Steps: 
When a creature takes damage, follow the steps to calculate the damage and the 
corresponding outcome with a 0 hitpoint.  
      1. Opponent Roll damage die or dices, add any modifiers, and apply the damage 
      2. When the creature’s hit point is reduced to 0, the character is in instant death if there’s damage remaining, and the remaining damage equals to exceeds the hit point maximum of the creature. 
      3. If the creature with 0 hit point isn’t dead, then it falls unconscious; the player could resume playing after gaining any hit points.


Exceptions (error scenarios): 
      1. Incorrect calculation of damage, the user will need to change the status of the creature based on the update hit points


Extensions/Variations (alternate paths): Mighty villains and special nonplayer characters might be common exceptions and the DM decides to have the same set of rules or not. 
 


Jacob Christy (we always refer to him by his full name):
Use case: Rolling for a spell check
Actors: D&D player (aka a common user)
Triggers: The user selects the cast spell button
Preconditions: The user has filled out their character info 
Postconditions: The user receives the spell hit number as well as the damage done by said spell if it hits their target.
List of Steps: 
      1. The user clicks the cast spell button
      2. The user selects what spell they wish to cast and their desired level
      3. The user presses the roll die button
      4. The software shows the user the result of “their” die roll with its modifiers added. 
      5. The software shows the user the resulting damage caused by their spell if it is an attacking spell.
Extensions/Variations: 
      * The user wants to roll for other non-ability check
      * The display could be modified for non-casters who have abilities that require a die roll/math
        
Exceptions:
      * The player’s character has no spells
1a. The software would display that the user has no spells they can cast.
        


Non-functional Requirements
Describe at least three non-functional requirements, e.g., related to scalability, usability, security and privacy, etc.
      * On the front end the buttons and containers should be scalable to new variations to provide more portable/extensible uses. 
      * The calls to the backend should be implemented in a way that API calls should be easily replaced when web applications or other views are implemented. 
      * To avoid initial security issues we are not implementing any user information (e.g. password/username), and there is no networking component to the application.




External Requirements
      * The product must be robust against errors that can reasonably be expected to occur, such as invalid user input.
      * The product must be installable by a user, or if the product is a web-based service, the server must have a public URL that others can use to access it. If the product is a stand-alone application, you are expected to provide a reasonable means for others to easily download, install, and run it.
      * The software (all parts, including clients and servers) should be buildable from source by others. If your project is a web-based server, you will need to provide instructions for someone else setting up a new server. Your system should be well documented to enable new developers to make enhancements.
      * The scope of the project must match the resources (number of team members) assigned.
      * We believe the current scope of this project is a good challenge considering our resources. This is a project that could be quickly done in a weekend by a few people, but our addition of a backend and our group’s unfamiliarity with software development and certain resources gives us plenty of work to match our workload needs. 


Team Process description
        Software Toolset:
      * React NodeGUI – the team is more familiar with React than other front-end frameworks.
      * Java – sufficiently robust/speedy for our purposes; strong familiarity across teams.
      * Data Serialization - We anticipate using JSON and storing in a file or multiple files, instead of using a database. We want to use JSON as it is an industry standard and we would like more experience with it.
      * Sprint tracking - JIRA will be used to track our Sprints and blockings issues. JIRA is the industry standard for managing Sprints and we would like more experience with it. 


        Team member’s role:
      * Hunter: front-end development – has professional full-stack experience; comfortable with front-end
      * Joan: front-end development – enjoyed React programming; wants more experience with it
      * Jacob: front- and back-end development – better at back-end than front-end, but wants to practice front-end; willing to be the liaison between front and back teams
      * Allie: back-end development and research lead – doesn’t want to do more React programming; likes back-end programming; has the most working D&D5E knowledge
      * Steven: back-end development – not confident in React programming skills; enjoys back-end systems development
                


        Schedule for each sub-group (4 milestones/deadlines):
      * Character creation: 4/24
      * Roll ability checks: 4/24 
      * Roll combat checks : 5/1
      * Roll spells: 5/8
        BETA RELEASE DUE 5/10


        3 Major risks:
      1. Ensuring all team members have a basic and common understanding of Dungeons and Dragons Fifth Edition because none of us are regular players.
      2. Underestimating the amount of technical work needed to complete this because we are collectively inexperienced.
      3. Maintaining agreement on what the user interface will display, since this will guide back-end and front-end development..


        When is external feedback best:
                Since we do not know what we don’t know, any time a major feature is completed would be a great time for external feedback to ensure we are still making a product that the intended users want.


Glossary
User:
Character:
Race:
Class:
Background:
Proficiency:
Level:
